#!/usr/bin/env ruby

require 'fileutils'
require 'pp'
require 'rubygems'
require 'jira-ruby'
require 'json'


# prerequisite:
# gem install jira-ruby


# interactive script--no args needed
# just run ./jira -c or ./jira -b
# it'll ask for confirmation before making changes
#
# requires:
# - `fzf` on $PATH
# - $JIRA_USERNAME set (email address)
# - $JIRA_TOKEN set (i forget where i got mine tbh)
# 
# this might be where you find api tokens
# https://id.atlassian.com/manage/api-tokens


def command?(name)
  `which #{name}`
  $?.success?
end

def env?(name)
  v = ENV[name]
  v and v.chomp != ""
end


throw "This script requires fzf" unless command? "fzf"
throw "This script requires $JIRA_USERNAME in env" unless env? "JIRA_USERNAME"
throw "This script requires $JIRA_TOKEN in env" unless env? "JIRA_TOKEN"



$cache_dir = "#{ENV["HOME"]}/.cache"

module Cache
  @@dir = $cache_dir

  def clear
    fileutils.rm_rf(@@dir)
  end

  def set(k,v)
    Dir.mkdir(@@dir) unless File.exists?(@@dir)
    old = Dir["#{k}-*"][0]
    File.delete(old) if old
    File.write("#{@@dir}/#{k}-#{Time.now.to_i}", v.to_json)
  end

  def get(k, max_age = 60 * 60 * 4)
    now = Time.now.to_i
    path = Dir["#{@@dir}/#{k}-*"][0]
    date = File.basename(path)["#{k}-".length..-1].to_i if path
    if date and max_age != nil and date > (now - max_age)
      return JSON.parse(File.read(path))
    end
    return false
  end

  def read_through(k, max_age = 60 * 60 * 4)
    got = get(k, max_age)
    return got if got
    puts "Fetching #{k}..."
    new = JSON.parse(yield.to_json)
    set(k, new)
    new
  end
end



module Terminal
  @@dir = $cache_dir
  @@pipefile = nil

  def pipefile
    if @@pipefile == nil
      Dir.mkdir(@@dir) unless File.exists?(@@dir)
      @@pipefile = "#{@@dir}/tmp-#{`date "+%Y-%m-%d-%H%M%S-#{rand 10}"`}".chomp
    end
    @@pipefile
  end

  def write(stdin)
    File.write(pipefile, stdin)
  end

  def read
    File.read(pipefile)
  end

  # lol oof this is probably slow or something
  # TODO: figure out irl streams
  def pipe_to(stdin, cmd)
    write stdin
    `cat #{pipefile} | #{cmd}`
  end

  def vim(stdin)
    write stdin
    system("vim #{pipefile}")
    read
  end

  # this api is kinda stupid. should have one function
  # - allow-no-input is kw arg
  # - accept-unknown-value is kw arg

  def select(options)
    result = pipe_to("\n" + options.join("\n"), "fzf").chomp
    result == "" ? false : result
  end

  def select_or_create(options)
    lines = pipe_to(options.join("\n"), "fzf --print-query").chomp.split("\n")
    result = lines.length == 1 ? lines[0] : lines[1]
    result == "" ? false : result
  end
end



module Jira
  include Terminal
  include Cache

  @@options = {
    :username     => ENV["JIRA_USERNAME"],
    :password     => ENV["JIRA_TOKEN"],
    :site         => 'https://samsaradev.atlassian.net',
    :context_path => '',
    :auth_type    => :basic
  }

  @@client = JIRA::Client.new(@@options)

  def client
    @@client
  end

  def issuetypes(project_id)
    Cache.read_through("#{project_id}-issuetypes") do
      client.Project.find(project_id).issueTypes.map do |t|
        t["name"]
      end
    end
  end

  def users(project_id)
    Cache.read_through("#{project_id}-users") do
      client.Project.find(project_id).users(max_results: 1000).map do |u|
        u.name
      end
    end
  end

  def issues(project_id)
    Cache.read_through("#{project_id}-issues") do
      client.Issue.jql("project = #{project_id}").map do |i|
        "#{i.key}| #{i.summary}"
      end
    end
  end

  # TODO jank string bs use data or something
  def epics(project_id)
    Cache.read_through("#{project_id}-epics") do
      client.Issue.jql("project = #{project_id} and type = 'epic'").map do |i|
        "#{i.key}| #{i.summary}"
      end
    end
  end

  def fields
    Cache.read_through("all-fields", 60 * 60 * 24 * 7) do
      JIRA::Resource::Createmeta.all(client, expand: "projects.issuetypes.fields")
    end
  end

  def url(issue)
    "#{@@options[:site]}/browse/#{issue["key"]}"
  end

  def field_by_name(project_id, issue_type, field_name)
    project = fields.find do |p|
      p["key"] == project_id
    end
    issue_type = project["issuetypes"].find do |i|
      i["name"] == issue_type
    end
    field = issue_type["fields"].values.find do |f|
      f["name"].downcase.include? field_name.downcase
    end
    puts "Inferred '#{field["name"]}' as custom field matching '#{field_name}'"
    field["key"]
  end

  def build
    client.Field.map_fields

    fields = {}

    # project
    project = "MOB"
    throw "error" unless project
    fields["project"] = {"key" => project}

    # summary
    print "Summary: "
    summary = gets.chomp
    throw "error" unless summary != ""
    fields["summary"] = summary

    # issue type
    issuetype = Terminal.select(issuetypes(project))
    throw "error" unless issuetype
    fields["issuetype"] = {"name" => issuetype}

    # assignee
    assignee = Terminal.select(users(project))
    fields["assignee"] = {"name" => assignee} if assignee

    # description
    description = Terminal.vim("").chomp
    fields["description"] = description if description != ""

    # story points
    print "Story points: "
    storypoints = gets.chomp
    fields[field_by_name(project, issuetype, "story")] = storypoints.to_i if storypoints != ""

    # epic
    epic = Terminal.select(epics(project))
    puts epic
    fields[field_by_name(project, issuetype, "epic")] = epic.split("|")[0].chomp if epic


    # TODO: prompt for "components"
    # - can get from createmeta
    # - use fzf --multi to select >1


    # todo: ask if it should be in the active sprint
    # use boards api to get boards in project, then sprints in board, then filter active
    # :grimacing:



    puts
    pp fields
    puts
    print "create? y/n: "
    exit 1 if gets.chomp() != "y"

    fields
  end

  def create
    fields = build
    issue = client.Issue.build
    issue.save({"fields" => fields}) or throw "API error"
    issue
  end

  def browse
    # project
    project = "MOB"
    throw "error" unless project

    key = Terminal.select(issues(project)).split("|")[0].chomp
    JSON.parse client.Issue.find(key).to_json
  end
end



module CLI
  include Jira

  def main
    if ARGV.include? "create"
      ARGV.clear
      puts JIRA.url Jira.create
      exit 0
    end

    puts JIRA.url JIRA.browse
    exit 0
  end
end



include CLI
CLI.main

